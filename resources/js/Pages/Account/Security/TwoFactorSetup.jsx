import {useState} from "react";
import {Link, useForm} from "@inertiajs/inertia-react";
import { handleError, fixForms, handleChange } from "@/js/Utils/Utils";

import AccountLayout from "@/js/Layouts/AccountLayout";
import Button from "@/js/Components/Button";
import Label from "@/js/Components/Forms/Label";
import Input from "@/js/Components/Forms/Input";
import InputError from "@/js/Components/Forms/InputError";
import Clipboard from 'react-clipboard.js';
import {ChevronLeftIcon, InformationCircleIcon} from "@heroicons/react/24/outline";

export default function TwoFactorSetup({ secret, dark_qr, light_qr }) {
    const [showQR, setShowQR] = useState(true);
    const toggleShowQR = () => {
        setShowQR((prev) => !prev);
    }

    const meta = [
        { property: 'og:title', content: 'Account > Security > 2FA Setup | FranciscoSolis' },
    ];

    const { data, setData, errors, post, setError, clearErrors } = useForm(fixForms({
        one_time_password: '',
    }));

    const onBlur = () => {
        if(data.one_time_password.length !== 6) {
            setError('one_time_password', 'The one time password must be 6 characters.');
        } else if(/[0-9]{6}/.test(data.one_time_password) === false) {
            setError('one_time_password', 'The one time password must be numeric.');
        } else {
            clearErrors('one_time_password');
        }
    };

    const submit = (e) => {
        e.stopPropagation()
        e.preventDefault()

        post(route('account.security.access.two-factor-auth.validate'), {
            onError: err => {
                handleError(err, 'There was an error verifying your one time password.');
            },
            only: ['secret', 'errors', 'flash'],
        })
    };

    return (
        <AccountLayout title="Security > 2FA Setup" meta={meta}>
            <div className="flex flex-col w-full items-start">
                <form onSubmit={submit} className="mb-5 w-full">
                    <Link preserveState href={route('account.security.access')} className="flex items-center mb-2 text-blue-500 text-sm cursor-pointer"><ChevronLeftIcon className="w-5 h-5"/> Go Back</Link>
                    <h2 className="flex items-center text-xl">2FA {secret !== 'hidden' ? 'Setup' : 'Test'}&nbsp;<InformationCircleIcon className="h-5 w-5" data-tip={secret === 'hidden' ? 'Here you\'ll be able to test your 2FA codes!' : 'Setup your 2FA and test the code!'}/></h2>
                    <hr className="w-1/4 border-0 border-t-2 border-gray-500 mb-5"/>

                    {secret !== 'hidden' && <div className="flex flex-col mb-10">
                        <span>Scan the QR Code to begin setup:</span>
                        <div className="flex">
                            {showQR && <div>
                                <div className="py-2 block dark:hidden"
                                     dangerouslySetInnerHTML={{__html: light_qr}}></div>
                                <div className="py-2 hidden dark:block"
                                     dangerouslySetInnerHTML={{__html: dark_qr}}></div>

                                <div className="flex flex-row mt-2">
                                    <Button type="button" onClick={toggleShowQR}>Show Key String</Button>
                                </div>
                            </div>}
                            {!showQR && <div className="flex flex-col">
                                <Label forInput="secret" value="Secret"/>
                                <Clipboard data-clipboard-text={secret}>
                                    <Input
                                        name="secret"
                                        value={secret}
                                        className="w-[44rem]"
                                        readOnly
                                        type="text"
                                        handleClick={e => e.target.select()}
                                    />
                                </Clipboard>

                                <div className="flex flex-row mt-2">
                                    <Button type="button" onClick={toggleShowQR}>Show QR Code</Button>
                                </div>
                            </div>}
                        </div>
                    </div>}

                    <div className="grid grid-cols-3 gap-12 mb-5">
                        {/* One Time Password */}
                        <div className="flex flex-col">
                            <Label forInput="one_time_password" value="2FA Code" info="Write here the code generated by the app"/>

                            <Input
                                type="text"
                                name="one_time_password"
                                placeholder="123456"
                                className="mt-1 w-full"
                                autoComplete="one-time-password"
                                handleChange={(e) => handleChange(setData, e)}
                                handleBlur={onBlur}
                                value={data.one_time_password}
                                pattern="[0-9]{6}"
                                required
                            />

                            <InputError message={errors.one_time_password} className="mt-2" />
                        </div>
                    </div>

                    {/* Save button */}
                    <Button color={100} className="!text-sm">Submit</Button>
                </form>
            </div>
        </AccountLayout>
    );
}